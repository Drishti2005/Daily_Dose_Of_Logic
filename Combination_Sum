class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> result = new ArrayList<>();
        backtrack(candidates, 0, new ArrayList<>(), target, result);
        return result;
    }

    private void backtrack(int[] candidates, int idx, List<Integer> current, int target, List<List<Integer>> result) {
        if (target == 0) {
            result.add(new ArrayList<>(current));
            return;
        }
        if (target < 0 || idx >= candidates.length) {
            return;
        }


        current.add(candidates[idx]);
        backtrack(candidates, idx, current, target - candidates[idx], result);
        current.remove(current.size() - 1); // backtrack

        
        backtrack(candidates, idx + 1, current, target, result);
    }
}
