class Solution {
    public int reversePairs(int[] nums) {
        return sort(nums, 0, nums.length - 1);
    }

    public static int sort(int[] arr, int si, int ei) {
        if (si >= ei) return 0;
        
        int mid = si + (ei - si) / 2;
        int count = sort(arr, si, mid) + sort(arr, mid + 1, ei);

        
        count += countpairs(arr, si, mid, ei);

        
        merge(arr, si, mid, ei);

        return count;
    }

    public static int countpairs(int[] arr, int si, int mid, int ei) {
        int right = mid + 1;
        int c = 0;
        for (int i = si; i <= mid; i++) {
            while (right <= ei && (long) arr[i] > 2L * arr[right]) {
                right++;
            }
            c += (right - (mid + 1));
        }
        return c;
    }

    public static void merge(int[] arr, int si, int mid, int ei) {
        int[] temp = new int[ei - si + 1];
        int i = si, j = mid + 1, k = 0;

        while (i <= mid && j <= ei) {
            if (arr[i] <= arr[j]) {
                temp[k++] = arr[i++];
            } else {
                temp[k++] = arr[j++];
            }
        }
        while (i <= mid) temp[k++] = arr[i++];
        while (j <= ei) temp[k++] = arr[j++];

        for (int x = 0; x < temp.length; x++) {
            arr[si + x] = temp[x];
        }
    }
}
