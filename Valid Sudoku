class Solution {
    public boolean isValidSudoku(char[][] board) {
        int rows = board.length;
        int cols = board[0].length;
        int[][] grid = new int[rows][cols];
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                char ch = board[i][j];
                if (ch >= '1' && ch <= '9') {
                   grid[i][j] = ch - '0'; 
                } else {
                    grid[i][j] = 0; 
                }
            }
        }
        for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 9; j++) {
                int val = grid[i][j];
                if (val != 0) {
                    grid[i][j] = 0;
                    if (!isValid(grid, i, j, val)) {
                        return false;
                    }
                    grid[i][j] = val;
                }
            }
        }

        return true;
        
    }

    public static boolean isValid(int[][] grid,int row,int col,int val){
        //row
        for(int i=0;i<9;i++){
            if(grid[i][col]==val){
                return false;
            }
        }
        //col
        for(int i=0;i<9;i++){
            if(grid[row][i]==val){
                return false;
            }
        }
        //3*3 matrix
        int r=row-row%3;
        int c=col-col%3;
        for(int i=r;i<r+3;i++){
            for(int j=c;j<c+3;j++){
                if(grid[i][j]==val){
                    return false;
                }
            }
        }
        return true;
    }
}
